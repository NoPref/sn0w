#include "c_exploits.hpp"
#include "../globals.hpp"

void CExploits::update() noexcept {
    CExploits* const& thiz = g.sn0w.exploits;
    thiz->weaponExploits();
}

void CExploits::lateUpdate() noexcept {
    CExploits* const& thiz = g.sn0w.exploits;
    thiz->noclip();
}

void CExploits::createMove() noexcept {
    CExploits* const& thiz = g.sn0w.exploits;
    thiz->ignoreFreezeTime();
}

void CExploits::weaponExploits() noexcept {
    CLocalPlayer* local = g.vars.players.m_local;
    if(local != NULL) {
        if(local->isAlive()) {
            if(local->isHoldingGun()) {
                CGunController* curWeapon = (CGunController*)(local->getCurrentWeapon());
                if(curWeapon->m_parameters != NULL) {
                    if(g.config.exploits.infinity_ammo) {
                        curWeapon->m_iMagazineCapacitySafe.setValue(77, true);
                    }
                    if(g.config.exploits.rapid_fire) {
                        if(local->pCmd->m_bFire) {
                            curWeapon->m_fTimeFiredSafe.setValue(curWeapon->m_fTimeFiredSafe.getValue() - (curWeapon->m_fFireIntervalSafe.getValue()));
                        }
                    }
                    if(g.config.exploits.wallshot) {
                        curWeapon->m_parameters->m_iPenetrationPowerSafe.m_value.setValue(INT32_MAX-1);
                    }
                }
            }
        }
    }
}

void CExploits::ignoreFreezeTime() noexcept {
    if(g.config.exploits.ignore_freeze_time) {
        CLocalPlayer* local = g.vars.players.m_local;
        CInputs* pcmd = CLocalPlayer::pCmd;
        CInputs& oldCmd = CLocalPlayer::oldCmd;
        if(pcmd != NULL && local != NULL && g.vars.pTouchController != NULL) {
            void* pFireBut = *(void**)((unsigned long long)g.vars.pTouchController + ofs(touch_con.shoot));
            void* pJumpBut = *(void**)((unsigned long long)g.vars.pTouchController + ofs(touch_con.jump));
            void* pAimBut  = *(void**)((unsigned long long)g.vars.pTouchController + ofs(touch_con.aim));
            if(local->isAlive() && pFireBut != NULL && pJumpBut != NULL && pAimBut != NULL) {
                pcmd->m_bFire = *(bool*)((unsigned long long)pFireBut + ofs(i_button.pressed));
                pcmd->m_bJump = *(bool*)((unsigned long long)pJumpBut + ofs(i_button.pressed));

                static bool touched{};
                bool aim = *(bool*)((unsigned long long)pAimBut  + ofs(i_button.pressed));
                if(aim && !touched) {
                    pcmd->m_bAim = !pcmd->m_bAim;
                }
                touched = aim;
                
                const vec2_t vecJoystickAxis = local->getJoystickAxis();
                pcmd->m_fForwardMove = vecJoystickAxis.y;
                pcmd->m_fSideMove = vecJoystickAxis.x;
                oldCmd.m_fForwardMove = pcmd->m_fForwardMove;
                oldCmd.m_fSideMove = pcmd->m_fSideMove;
            }
        }
    }
}

void CExploits::noclip() noexcept {
    if(g.config.exploits.noclip) {
        CLocalPlayer* local = g.vars.players.m_local;
        CInputs& oldCmd = CLocalPlayer::oldCmd;
        if(local == NULL || g.vars.mainCamera == NULL)
            return;
        if(!local->isAlive() || g.vars.mainCamera->getTransform() == NULL)
            return;
        
        CMovementController* movement = local->m_movement;
        if(movement == NULL)
            return;
        
        CPlayerTranslationData* data = movement->m_data;
        if(data == NULL)
            return;
        
        if(oldCmd.m_fForwardMove != 0.f && oldCmd.m_fSideMove != 0.f) {
            const vec3_t vecOrigin = local->m_transform->getPosition();
            const vec3_t vecForward = (g.vars.mainCamera->getTransform()->getForward() * (oldCmd.m_fForwardMove / 10));
            const vec3_t vecRight = (g.vars.mainCamera->getTransform()->getRight() * (oldCmd.m_fSideMove / 10));
            const vec3_t vecWish = vecOrigin + vecForward + vecRight;
            data->m_vecCurrent = vecWish;
            data->m_vecPrev = vecWish;
            local->m_transform->setPosition(vecWish);
        }
    }
}